#!/usr/bin/python
"""

Extract all emails in a Noark 5 file/mappe from the archive and hand
it over as a mbox file to the mail program.

"""

__license__ = 'GNU General Public License v2 or later at users choice'
__author__ = 'Petter Reinholdtsen'

import sys
import os
sys.path.append(os.path.join(sys.path[0],'lib'))

import argparse
import dateutil.parser
import email.utils
import json
import subprocess
import tempfile
from time import strftime, gmtime, mktime, time

import n5core.endpoint
from n5core.pick import pickUnlessOne

def main():
    baseurl = "http://localhost:8092/noark5v4/"
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", help="print more debug information",
                        action="store_true")
    parser.add_argument("--baseurl", help="(default is %s)" % baseurl)
    parser.add_argument("--keep", help="keep mbox file after execution",
                        action="store_true")
    parser.add_argument("--mailer", default="mutt",
                        help="mail program to use (default is mutt)")
    args = parser.parse_args()

    if args.mailer is not None:
        mailer=args.mailer

    if args.baseurl:
        baseurl = args.baseurl

    (mailfh, mailpath) = tempfile.mkstemp(suffix='.mbox', text=True)
    mailfile = os.fdopen(mailfh, 'w')

    first=True
        
    api = n5core.endpoint.Endpoint(baseurl)
    api.verbose = args.verbose
    api.login()
    
    # Extract all emails from file, fake non-email as email with the
    # reported content type, and format emails as mbox file.
    fondsrel = api.relbaseurl + 'arkivstruktur/arkiv/'
    fondshref = api.findRelation(fondsrel)
    (c, res) = api.json_get(fondshref)
    fondsinfo = json.loads(c)
    info = pickUnlessOne(fondsinfo, 'arkiv')
    serieshref = info['_links'][api.relbaseurl + 'arkivstruktur/arkivdel/']['href']
    
    #print("Arkivdel %s" % serieshref)
    (c, res) = api.json_get(serieshref)
    seriesinfo = json.loads(c)
    info = pickUnlessOne(seriesinfo, 'arkivdel')

    fileshref = info['_links'][api.relbaseurl + 'arkivstruktur/mappe/']['href']
    #print("Mappe %s" % fileshref)
    (c, res) = api.json_get(fileshref)
    filesinfo = json.loads(c)
    fileinfo = pickUnlessOne(filesinfo, 'mappe')

    fileshref = fileinfo['_links'][api.relbaseurl + 'arkivstruktur/registrering/']['href']
    #print("Registrering %s" % fileshref)
    (c, res) = api.json_get(fileshref)
    reginfos = json.loads(c)
    
    if 'results' in reginfos:
        for reginfo in reginfos['results']:
            docdeschref = reginfo['_links'][api.relbaseurl + 'arkivstruktur/dokumentbeskrivelse/']['href']
            #print("Dokumentbeskrivelse %s" % docdeschref)
            (c, res) = api.json_get(docdeschref)
            docdescinfos = json.loads(c)
            if 'results' in docdescinfos:
                for docdescinfo in docdescinfos['results']:
                    if api.verbose:
                        print("Docdescinfo:", docdescinfo)
                    fileshref = docdescinfo['_links'][api.relbaseurl
                                                      + 'arkivstruktur/dokumentobjekt/']['href']
                    #print("Dokumentobjekt %s" % fileshref)
                    (c, res) = api.json_get(fileshref)
                    docobjinfos = json.loads(c)
                    if 'results' in docobjinfos:
                        for docobjinfo in docobjinfos['results']:
                            if api.verbose:
                                print("Docobjinfo:", docobjinfo)
                            #print(docobjinfo['format'], docobjinfo['mimeType'])
                            contenthref = \
                                          docobjinfo['_links'][api.relbaseurl
                                                               + 'arkivstruktur/fil/']['href']
                            (c, res) = api._get(contenthref, {'Accept' : '*/*'})
                            # FIXME use timestamp from database?
                            fromdate = strftime("%a %b %d %H:%M:%S %Y",
                                                gmtime(time()))
                            if not first:
                                mailfile.write("\n\n")
                            mailfile.write("From nikita %s\n" % fromdate)
                            ct = res.getheader('Content-Type')
                            if 'message/rfc822' == ct:
                                print("Received email from API (Content-Type %s)" % ct)
                            else:
                                if 'formatDetaljer' in docobjinfo:
                                    d = "/" + docobjinfo['formatDetaljer']
                                else:
                                    d = ""
                                if 'filnavn' in docobjinfo:
                                    filnavn = docobjinfo['filnavn']
                                else:
                                    filnavn = docobjinfo['systemID']
                                if api.verbose:
                                    print("Docobjinfo:", docobjinfo)
                                subject = "%s: %s%s - %s" % \
                                          (docobjinfo['variantformat'],
                                           docobjinfo.get('format'), d, filnavn)
                                # FIXME figure out if there is a better date field to use
                                date = dateutil.parser.parse(docdescinfo['tilknyttetDato'])
                                print("Received non-email from API (Content-Type %s, filename %s, created %s)" % (ct, subject, date))
                                mailfile.write("Subject: %s\n" % subject)
                                mailfile.write("Date: %s\n" % \
                                               email.utils.formatdate(mktime(date.timetuple())))
                                mailfile.write("Content-type: %s\n" % ct)
                                mailfile.write("\n")
                            mailfile.write(c)
                            first=False

    mailfile.close()
    if first:
        print("error: failed to find any documents in this file, not starting mailer")
    else:
        # Start mailer with MAIL environment set to the mbox file 
        child_env = os.environ.copy()
        child_env['MAIL'] = mailpath
        p = subprocess.Popen([mailer], env=child_env)
        p.wait()
    
    # remove the mbox file
    if not args.keep:
        os.unlink(mailpath)
    else:
        print("Did not remove %s" % mailpath)

if __name__ == '__main__':
    main()
